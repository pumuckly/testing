#!/bin/sh

# /etc/init.d/selenium
# assumes that selenium server and chromedriver exist in:
# /root/selenium/selenium-server-4.1.2.jar
# /usr/bin/chromedriver
# /usr/bin/geckodriver

# Do NOT "set -e"

# PATH should only include /usr/* if it runs after the mountnfs.sh script
PATH=/sbin:/usr/sbin:/bin:/usr/bin
DESC="Selenium server"
NAME=selenium
DAEMON="/root/selenium/selenium-server-4.1.2.jar"
#DAEMON_ARGS="-Dwebdriver.chrome.driver=/usr/bin/chromedriver -Dwebdriver.gecko.driver=/usr/bin/geckodriver standalone"
DAEMON_ARGS="standalone"
PIDFILE=/var/run/$NAME.pid
SCRIPTNAME=/etc/init.d/$NAME
TMPDIR=/tmp/$NAME
LOGFILE=$TMPDIR/$NAME.log

# Exit if the package is not installed
[ -r "${DAEMON}" ] || exit 0

# Read configuration variable file if it is present
[ -r /etc/default/$NAME ] && . /etc/default/$NAME

# Load the VERBOSE setting and other rcS variables
. /lib/init/vars.sh

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.2-14) to ensure that this file is present
# and status_of_proc is working.
. /lib/lsb/init-functions

#
# Function that starts the daemon/service
#
do_start()
{
    [ ! -e $PIDFILE ] || return 1

    export DISPLAY=:99
    ##export DISPLAY=localhost:0.0
    export TMPDIR=${TMPDIR}

    ## create folders and setup rights
    if [ ! -d ${TMPDIR} ]; then
        mkdir -p ${TMPDIR}
        chmod 02777 ${TMPDIR}
        chown develop:builder ${TMPDIR}
    fi

    if [ ! -d ${TMPDIR}/downloads ]; then
        mkdir -p ${TMPDIR}/downloads
        chmod 02777 ${TMPDIR}/downloads
        chown develop:builder ${TMPDIR}/downloads
    fi

    if [ ! -d ${TMPDIR}/cookies ]; then
        mkdir -p ${TMPDIR}/cookies
        chmod 02777 ${TMPDIR}/cookies
        chown develop:builder ${TMPDIR}/cookies
    fi

    # Return
    #   0 if daemon has been started
    #   2 if daemon could not be started
    start-stop-daemon --start --quiet --pidfile $PIDFILE --make-pidfile --background -c root:root --startas /bin/bash -- -c "exec /usr/bin/xvfb-run -- /usr/bin/java -jar $DAEMON $DAEMON_ARGS >>$LOGFILE 2>&1"
    RETVAL="$?"
    [ "$RETVAL" = 2 ] && return 2

    # Add code here, if necessary, that waits for the process to be ready
    # to handle requests from services started subsequently which depend
    # on this one.  As a last resort, sleep for some time.
}

#
# Function that stops the daemon/service
#
do_stop()
{

    [ -e $PIDFILE ] || return 0

    PPID=`cat ${PIDFILE}`

    # Wait for children to finish too if this is a daemon that forks
    # and if the daemon is only ever run from this initscript.
    # If the above conditions are not satisfied then add some other code
    # that waits for the process to drop all resources that could be
    # needed by services started subsequently.  A last resort is to
    # sleep for some time.
    #start-stop-daemon --stop --oknodo --retry=TERM/30/KILL/5 --ppid $PPID --exec /usr/bin/java -- -jar "$DAEMON" "$DAEMON_ARGS"
    #[ "$?" = 2 ] && return 2

    start-stop-daemon --stop --oknodo --retry=TERM/30/KILL/5 --ppid $PPID
    RETVAL="$?"
    [ "$RETVAL" = 2 ] && return 2

    # Return
    #   0 if daemon has been stopped
    #   1 if daemon was already stopped
    #   2 if daemon could not be stopped
    #   other if a failure occurred
    #if [ -e $PIDFILE ]; then
    #    start-stop-daemon --stop --quiet --oknodo --retry=TERM/30/KILL/5 --pidfile $PIDFILE
    #    RETVAL="$?"
    #    [ "$RETVAL" = 2 ] && return 2
    #fi

    # Many daemons don't delete their pidfiles when they exit.
    if [ -e $PIDFILE ]; then
        rm -f $PIDFILE
    fi

    ## remove temporary folders
    if [ -d ${TMPDIR}/cookies ]; then
        rm -rf ${TMPDIR}/cookies
    fi

    if [ -d ${TMPDIR}/downloads ]; then
        rm -rf ${TMPDIR}/downloads
    fi

    ## remove X desktop frame buffers
    if [ -d ${TMPDIR} ]; then
        for FNAME in ${TMPDIR}/xvfb-run.*
        do
            if [ -d "${FNAME}" ]; then
                rm -rf ${FNAME}
            fi
            if [ -e "${FNAME}" ]; then
                unlink ${FNAME}
            fi
        done
    fi

    return "$RETVAL"
}

case "$1" in
  start)
    [ "$VERBOSE" != no ] && log_daemon_msg "Starting $DESC" "$NAME"
    do_start
    case "$?" in
        0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
        2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
    esac
    ;;
  stop)
    [ "$VERBOSE" != no ] && log_daemon_msg "Stopping $DESC" "$NAME"
    do_stop
    case "$?" in
        0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
        2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
    esac
    ;;
  status)
    status_of_proc -p $PIDFILE "$DAEMON" "$NAME" && exit 0 || exit $?
    ;;
  restart|force-reload)
    #
    # If the "reload" option is implemented then remove the
    # 'force-reload' alias
    #
    log_daemon_msg "Restarting $DESC" "$NAME"
    do_stop
    case "$?" in
      0|1)
        do_start
        case "$?" in
            0) log_end_msg 0 ;;
            1) log_end_msg 1 ;; # Old process is still running
            *) log_end_msg 1 ;; # Failed to start
        esac
        ;;
      *)
        # Failed to stop
        log_end_msg 1
        ;;
    esac
    ;;
  *)
    echo "Usage: $SCRIPTNAME {start|stop|status|restart|force-reload}" >&2
    exit 3
    ;;
esac
